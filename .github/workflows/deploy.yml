name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install PHP Dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction

      - name: Install Node.js Dependencies
        working-directory: ./frontend
        run: npm install

  build:
    name: Build React
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node.js Dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build React Application
        working-directory: ./frontend
        run: |
          npm run build
          echo "Build completed successfully!"

  deploy:
    name: Deploy to Hostinger
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Install PHP Dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction

      - name: Build React
        working-directory: ./frontend
        run: npm run build

      - name: Prepare Deployment
        run: |
          mkdir -p deployment
          cp -r . deployment/
          cd deployment
          cp -r frontend/dist/* public/
          rm -rf frontend/
          cat > .env << 'EOF'
          APP_NAME="School Management System"
          APP_ENV=production
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=false
          APP_URL=${{ secrets.APP_URL }}
          FRONTEND_URL=${{ secrets.APP_URL }}

          DB_CONNECTION=mysql
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          SESSION_DRIVER=file
          SESSION_DOMAIN=.icvinformatique.com
          SANCTUM_STATEFUL_DOMAINS=${{ secrets.APP_URL }}
          EOF
          echo "Deployment preparation completed."

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Files
        run: |
          cd deployment
          rsync -avz --delete \
            --exclude='.env' \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SERVER_PATH }}/

      - name: Run Post-Deployment
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd ${{ secrets.SERVER_PATH }}
          chmod -R 755 .
          chmod -R 775 storage bootstrap/cache
          php artisan config:clear
          php artisan cache:clear
          php artisan migrate --force
          php artisan storage:link
          echo "ðŸš€ Deployment successful!"
          EOF