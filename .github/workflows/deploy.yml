name: Laravel CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # ----------------------------------------------------
  # 1. BUILD PHASE
  # ----------------------------------------------------
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Code
        uses: actions/checkout@v4

      - name: 2. Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo_mysql, dom, bcmath, curl
          tools: composer

      - name: 3. Install Composer packages
        run: composer install --no-dev --prefer-dist --optimize-autoloader

      - name: 4. Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: 5. Install npm packages
        run: npm ci
        working-directory: ./frontend 

      - name: 6. Build frontend Assets
        run: npm run build
        working-directory: ./frontend

            
      - name: 7. Enhanced Cache Busting for Assets
  run: |
    BUILD_HASH=$(git rev-parse --short HEAD)
    TIMESTAMP=$(date +%s)
    
    # Navigate to the dist directory
    cd frontend/dist
    
    # Add hash AND timestamp to all JS and CSS files
    for file in assets/*.js assets/*.css; do
      if [ -f "$file" ]; then
        filename=$(basename "$file")
        extension="${filename##*.}"
        nameonly="${filename%.*}"
        
        # Create new filename with hash AND timestamp
        new_filename="${nameonly}-${BUILD_HASH}-${TIMESTAMP}.${extension}"
        mv "$file" "assets/${new_filename}"
        
        # Update all references in index.html
        sed -i "s/$filename/$new_filename/g" index.html
      fi
    done
    
    echo "Cache busting completed with hash: $BUILD_HASH and timestamp: $TIMESTAMP" 
        
      # ðŸ‘‡ CRITICAL FIX: Move the built assets into the Laravel public folder
      - name: 8. Copy Frontend Assets to Public
        # The 'frontend/dist' directory contains the compiled index.html, assets/, etc.
        # We copy its *contents* directly into the repository's 'public/' directory.
        run: cp -R frontend/dist/* public/  
        
      # Archive the built files for the next job
      - name: 9. Archive Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: |
            ./*
            !./node_modules
            !./frontend/node_modules

  # ----------------------------------------------------
  # 2. DEPLOY PHASE (Requires successful build)
  # ----------------------------------------------------
  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      # 1. Download the built files
      - name: 1. Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: .

      # 2. NEW STEP: Pre-Deployment Cleanup (Delete old assets BEFORE transfer)
      - name: 2. Pre-Deployment Cleanup (Delete Old Assets)
        uses: appleboy/ssh-action@v0.1.10
        with:
         host: ${{ secrets.SFTP_HOST }}
         username: ${{ secrets.SFTP_USER }}
         key: ${{ secrets.SFTP_PRIVATE_KEY }}
         port: ${{ secrets.SFTP_PORT }}
         script: |
          echo "--- Running Pre-Deployment Cleanup ---"
          cd ~/public_html/laravel/
          # Delete the old assets and the redundant frontend source folder
          rm -rf ./public/assets
          rm -rf ./public/frontend
          echo "Old assets and source folder deleted."

      # 3. FILE TRANSFER (The FIX: Use SCP for source/target)
      - name: 2. Deploy Updated Files via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SFTP_HOST }} 
          username: ${{ secrets.SFTP_USER }}
          key: ${{ secrets.SFTP_PRIVATE_KEY }}
          port: ${{ secrets.SFTP_PORT }}

          # CRITICAL: This is the only way to reliably transfer all files.
          source: "./"
          target: "~/public_html/laravel/"
          overwrite: true # Forces overwrite of files

      # 4. RUN REMOTE COMMANDS (Clear Cache & Verify)
      - name: 3. Run Post-Deployment Commands
  uses: appleboy/ssh-action@v0.1.10
  with:
    host: ${{ secrets.SFTP_HOST }}
    username: ${{ secrets.SFTP_USER }}
    key: ${{ secrets.SFTP_PRIVATE_KEY }}
    port: ${{ secrets.SFTP_PORT }}
    script: |
      echo "--- Starting Post-Deployment Cleanup on Hostinger ---"
      
      # 1. Navigate to the Laravel application root
      cd ~/public_html/laravel/
      
      # 2. CLEAR CACHES (Essential)
      php artisan config:clear
      php artisan cache:clear
      php artisan view:clear
      
      # 3. Update .htaccess with cache control
      cat > ./public/.htaccess << 'EOF'
# Prefer index.html over index.php
DirectoryIndex index.html index.php

<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # If the request is not a file or directory, send to index.php
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>

# DISABLE CACHING FOR DEVELOPMENT
<IfModule mod_headers.c>
    # Disable caching for HTML
    <FilesMatch "\.(html|htm)$">
        Header set Cache-Control "no-cache, no-store, must-revalidate"
        Header set Pragma "no-cache"
        Header set Expires 0
    </FilesMatch>
    
    # Disable caching for JS and CSS
    <FilesMatch "\.(js|css)$">
        Header set Cache-Control "no-cache, no-store, must-revalidate"
        Header set Pragma "no-cache" 
        Header set Expires 0
    </FilesMatch>
</IfModule>
EOF
      
      # 4. Set proper permissions
      chmod 644 ./public/.htaccess
      
      echo "=== Final verification timestamp ==="
      ls -la ./public/assets
      echo "--- Deployment Complete! ---"
      # - name: 3. Run Post-Deployment Commands
      #   uses: appleboy/ssh-action@v0.1.10
      #   with:
      #     host: ${{ secrets.SFTP_HOST }}
      #     username: ${{ secrets.SFTP_USER }}
      #     key: ${{ secrets.SFTP_PRIVATE_KEY }}
      #     port: ${{ secrets.SFTP_PORT }}
          
      #     script: |
      #       echo "--- Starting Post-Deployment Cleanup on Hostinger ---"            
            
      #       # 1. Navigate to the Laravel application root
      #       cd ~/public_html/laravel/

           
            
      #       # 2. CLEAR CACHES (Essential)
      #       php artisan config:clear
      #       php artisan cache:clear
      #       php artisan view:clear
            
      #       # 3. Verification command (The file MUST show a current timestamp)
      #       echo "=== Final verification timestamp ==="
            ls -la ./public/assets # Verify the directory exists and has files

            echo "--- Deployment Complete! ---"
